the can finish method takes in 2 parameters which are the vertices of the graph and pre which are the directed edges. then we create 2 booleans vistited and helper to keep track of visisted vertices in the recursion stack to detect cycles. al represent the adjacency list of the graph which populates the list based on the input of pre where each index contains the list of vertices with an incoming edge from the vertex. we then iterate though each vertex in the graph and recursively calls the dfs function. if a cycle is detected then it returns false bc it cannot be topologically sorted. if no cycles are found then it returns true. the dfs helper method traverses through the graph and marks easch vertex as visted then adds it to the recusion stacj to detect cycles. if a neighbor has not been visited then it recursively calls itself onto that neighbor. if a cycle is found in any of the recusive calls then the method returns true. if no cycles are found after processing all of the neightbors then the current vertex is removed from the recusion stack and the method returns false. 
